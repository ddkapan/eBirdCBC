import React, { useState } from 'react';
import { MapContainer, TileLayer, Popup, Marker } from 'react-leaflet';
import './App.css';
import L from 'leaflet';
import axios from 'axios';
import { ExportToCsv } from 'export-to-csv';
import { Dropdown } from 'react-dropdown-now';
import './dropdown.css';
import ebirdcode from './ebirdCodes.json';
//import Marker from 'react-leaflet-enhanced-marker';
//const track = require('./tracks.json');
var zip = require('lodash.zip');

function App() {

  const [checklists, setlist] = useState("");
  const [markers, setpoints] = useState([]);
  const [deps, setdeps] = useState([]);
  //const [icon, setIcon] = useState([])
  const [map, setMap] = useState(null);
  const [count, setCount] = useState(0);

  // making different icons for each dependency
  const icons = []
  for (let i = 0; i < 30; i++) {
    const image = `/icons/icon_${deps[i]}.png`
    const icon = L.icon({
      iconUrl: image,
      iconSize: [25, 41],
    })
    icons.push(icon);
  }



  async function getSpecies() {
    // get the species from the database
    const species = await axios.get(`http://localhost:9000/get-species`)
      .then(function (response) {
        console.log("GOT SPECIES", response.data);
        return response.data;
      })
      .catch(function (error) {
        console.log(error);
      });
    const options = {
      filename: 'generated_species_list',
      fieldSeparator: ',',
      quoteStrings: '"',
      decimalSeparator: '.',
      showLabels: true,
      showTitle: true,
      title: 'Species List Generated by eBirdCBC',
      useTextFile: false,
      useBom: true,
      useKeysAsHeaders: true,
    };
    const csvExporter = new ExportToCsv(options);
    csvExporter.generateCsv(species);

  }

  let clear = async () => {
    // clear the database
    await axios.post('http://localhost:9000/clear')
      .then(function (response) {
        console.log("CLEARED", response);
      })
      .catch(function (error) {
        console.log(error);
      });
  };

  let updateDep = async (e) => {
    // update the dependent variable in the database
    await axios.post(`http://localhost:9000/dependency-update?dependent=${e}`)
      .then(function (response) {
        console.log("DEPENDENCY UPDATED", response);
      })
      .catch(function (error) {
        console.log(error);
      });
    getpts();
  };

  // when the form is submitted, add the checklists to the database
  function handleSubmit(e) {
    e.preventDefault();
    // add the checklists to the database
    const data = checklists.replace(/\s/g, "").split(","); // remove whitespace and split by comma
    const getChecklist = async (a) => {
      await axios.put(`http://localhost:9000/add-check?checklist=${a}`)
        .then(function (response) {
          console.log("PUT CHECKLISTS", response);
        }).catch(function (error) {
          console.log(error);
        });
    };
    const updateDep = async (a) => {
      await axios.post(`http://localhost:9000/dependency-update?dependent=${a}`)
        .then(function (response) {
          console.log("DEPENDENCY UPDATED", response);
        })
        .catch(function (error) {
          console.log(error);
        });
    };
    for (let i = 0; i < data.length; i++) {
      getChecklist(data[i]);
      setTimeout(function () {
        updateDep(`${data[i]},${i}`);
      }, 1000)
      console.log("added", String(`${data[i]},${i}`));
    };
    setTimeout(function () {
      getpts();
    }, 2000)
  }



  let getpts = async () => {
    // get the points from the database
    const points = await axios.get(`http://localhost:9000/get-points`)
      .then(function (response) {
        console.log("GOT POINTS", response.data);
        const coords = [];
        for (let i = 0; i < response.data.length; i++) {
          coords.push(response.data[i].responseChecklist.coords);
        };
        const dependent = [];
        for (let i = 0; i < response.data.length; i++) {
          dependent.push(response.data[i].dependent);
        };
        const date = [];
        for (let i = 0; i < response.data.length; i++) {

          date.push(response.data[i].responseChecklist.obsDt);
        };
        const duration = [];
        for (let i = 0; i < response.data.length; i++) {
          duration.push(Math.round(response.data[i].responseChecklist.durationHrs * 60) + " mins");
        };
        const ID = [];
        for (let i = 0; i < response.data.length; i++) {
          ID.push(response.data[i].responseChecklist.subId);
        };
        const notes = [];
        for (let i = 0; i < response.data.length; i++) {
          notes.push(response.data[i].responseChecklist.comments);
        };
        // get the species from the database and format them into a string for the popup
        const species = [];
        for (let i = 0; i < response.data.length; i++) {
          const speciesList = [];
          for (let j = 0; j < response.data[i].responseChecklist.obs.length; j++) {
            const sixcode = response.data[i].responseChecklist.obs[j].speciesCode;
            const name = ebirdcode[sixcode];
            const count = response.data[i].responseChecklist.obs[j].howManyAtleast;
            const code = `${name} (${count})`;
            var comments = (response.data[i].responseChecklist.obs[j].comments);
            if (comments === undefined) {
              speciesList.push(`${code}`);
            } else {
              speciesList.push(`${code} -- ${comments}`);
            }

          };
          species.push(speciesList.join('\n'));
        };
        // get the observer from the database
        const observer = [];
        for (let i = 0; i < response.data.length; i++) {
          observer.push(response.data[i].responseChecklist.userDisplayName);
        };
        return {
          coords: coords,
          dependent: dependent,
          date: date,
          duration: duration,
          ID: ID,
          notes: notes,
          species: species,
          observer: observer,
        };
      })
      .catch(function (error) {
        console.log(error);
      });
    console.log(points);
    const data = zip(points.dependent, points.coords, points.date, points.duration,
      points.ID, points.species, points.notes, points.observer);
    console.log(data);
    setpoints(data);

    const dep_arr = []; // array of dependents
    for (let i = 0; i < data.length; i++) {
      dep_arr.push(String(i))
    };
    setdeps(dep_arr);

  };


  return (
    <div classname="App">
      <h2>Christmas Bird Count Compiler</h2>
      1.) Input the checklist IDs separated by commas in the text box. Then click submit to add them to the database.<br></br>
      2.) If you want to to submit additional points, please clear the database and add all of the points. <br></br>
      3.) Navigate to the points and click on them to see the species and notes. Select the 'dependent' status for each point to group overlapping points together.<br></br>
      4.) Click "Get Species" to get the species from the database and compile them into a CSV file that will download.<br></br>
      <form onSubmit={handleSubmit}>
        <label>
          <input
            type="text"
            value={checklists}
            placeholder="Checklists IDs"
            onChange={(e) => setlist(e.target.value)}
          />
        </label>
        <input type="submit" />
      </form>

      <button onClick={clear}>Clear</button>

      <button onClick={getpts}>Get Points</button>

      <button onClick={getSpecies}>Get Species</button>


      <MapContainer whenCreated={setMap} classname='Map' center={[38, -122]} zoom={10} scrollWheelZoom={true}>
        <TileLayer url="https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}" />
        {markers.map((marker, index) => (
          <Marker position={marker[1]} icon={icons[marker[0]]}>
            <Popup maxWidth="500" maxHeight="500">
              <h2>Checklist ID: {marker[4]}</h2>
              <h3>Observer: {marker[7]}</h3>
              <h3>Date: {marker[2]}</h3>
              <h3>Duration: {marker[3]}</h3>
              <h3>Checklist Comments: {marker[6]}</h3>
              <h3>Dependent: {marker[0]}
                <br></br>
                {/*deps.map((i) => (
                  <button value={String(`${marker[4]},${i}`)} // marker[4] is the checklist ID, i is the dependent
                    onClick={e => updateDep(e.target.value)}>Dependent {i}</button>
                ))*/}
              </h3>
              <Dropdown options={(deps.map((i) => JSON.parse(`{"value": "${marker[4]},${i}", "label": "${i}"}`)))} 
                onChange={value => updateDep(value.value)} placeholder={marker[0]} />
              <h3>Species: </h3>
              <h5><pre>{marker[5]}</pre></h5>
            </Popup>
          </Marker>
        ))};
      </MapContainer>
    </div>
  );
};

export default App;
